# schedule_interval: @daily
# start_date: 2025-08-29
# catchup: false

def extract_data(**kwargs):
    
    import pandas as pd
    print("üì• Extracting data...")
    data = pd.DataFrame({
        'id': [1, 2, 3, 4, 5],
        'name': ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve'],
        'value': [100, 200, 150, 300, 250]
    })
    print(f"üìä Extracted {len(data)} rows")
    return data

def transform_data(**kwargs):
    """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÑ Transforming data...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏
    ti = kwargs['ti']
    data = ti.xcom_pull(task_ids='python_task_1_extract_data')
    
    if data is None:
        print("‚ö†Ô∏è No data received, using sample data")
        import pandas as pd
        data = pd.DataFrame({'col1': [1, 2, 3], 'col2': ['a', 'b', 'c']})
    
    # –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
    data['processed'] = data['value'] * 1.1 if 'value' in data.columns else data['col1'] * 2
    print(f"‚úÖ Transformed {len(data)} rows")
    return data

def load_data(**kwargs):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)"""
    print("üíæ Simulating data load...")
    
    ti = kwargs['ti']
    data = ti.xcom_pull(task_ids='python_task_2_transform_data')
    
    if data is not None:
        print(f"üì¶ Would load {len(data)} rows to database")
        print(f"üìä Data sample: {data.head(3).to_dict()}")
    else:
        print("‚ö†Ô∏è No data to load")
    
    return "‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"

def main_etl(**kwargs):
    """–û—Å–Ω–æ–≤–Ω–∞—è ETL —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ ETL process started")
    
    # –ú–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å
    print("‚úÖ All ETL steps completed successfully")
    return "ETL process finished"